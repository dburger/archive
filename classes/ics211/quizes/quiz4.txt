Chapter 5 Exercises

2.> Strings in the language containing 7 or fewer characters:

$
$$
$$$
$$$$
$$$$$
$$$$$$
$$$$$$$

abb
aabbbb

$abb
$$abb
$$$abb
$$$$abb

$aabbbb

6.>

a.)  <S> = ABB | A<S>BB

b.)

//Purpose:  to determine if the String str fits the following grammar->
//    {S:S is of the form A^n*B^2n for some n>0}.
//Preconditions:  a String str is passed to the method.
//Postconditions:  true is returned if String str is a string of the grammar
//    otherwise false is returned
public static boolean isL(String str) {
    if (str.length()<3)
        return false;
    else if(str.length()==3)
        return (str.equals("ABB"));        
    else {
        if ((str.charAt(0)=='A') &&
            (str.substring(str.length()-2,str.length()).equals("BB")))
            return isL(str.substring(1,str.length()-2));                
        else
            return false;
    }
}

10.>

a.)  <S> = A | B | C<S> | D<S>

b.)  No, CAB is not in this language.  While C followed by a string in the language is a string in the language, this 
string has C followed by an A followed by a B.  An A followed by B is not a string in the language.


c.)

//Purpose:  to determine if String str follows the following grammar->
//    The letter A, The letter B, the letter C followed by a string that
//    is in the language, the letter D followed by a string in the language.
//Preconditions:  a String str is passed to the method.
//Postconditions:  true is returned if String str was a string of the grammar
//    otherwise false is returned.
public static boolean isL(String str) {
    switch (str.length()) {
        case 0:
            return false;
        case 1:
            return (str.charAt(0)=='A' || str.charAt(0)=='B');
        default:
            if (str.charAt(0)=='C' || str.charAt(0)=='D')
                return isL(str.substring(1));
            else
                return false;
    }
}

12.>

a.)

//Purpose:  to determine the number of multiplications the execution
//    of p(x) performs given int x.
//Preconditions:  an int x is passed to the method representing a call
//    to p(x).
//Postconditions:  the number of multiplications that p(x) would perform
//    is returned.
public static int m(int x) {
    if (x<3)
        return 0;
    else
        return 1 + m(x-1) + m(x-3);
}



b.)

For notation I will use #p(n) to be the number of multiplications in p(n).
We can start this proof by showing that m(n) returns #p(n) for the trivial cases, let n=2 then
#p(2)=m(2)=0
in addition,
#p(n-1)=#p(1)=m(1)=0
similarly,
#p(n-2)=#p(0)=m(0)=0.
Also note that for any negative n #p(n) = #m(n)=0.
Now assume that our function holds for all nonnegative integer values up to and including some n.  Then, for n+1, 
n+1 is either 1 or 2, which have been shown to be true, or n+1 >= 3.  In the case of n+1 >= 3 it can be shown that:
#p(n+1) = 1 + #p((n+1)-1) + #p((n+1)-3)
              = 1 + #p(n) + #p(n-2)
              = 1 + m(n) + m(n-2)   (by the inductive hypothesis)
              = 1 + m((n+1)-1) + m((n+1)-3)
              = m(n+1)
Therefore, by mathematical induction, m(n) = #p(n) for all integers n.

Chapter 6 Exercises

3.>

a.)

//Purpose:  to display all the items in the stack as a debugging aid.
//Preconditions:  none.
//Postconditions:  the contents of the stack are displayed with
//    System.out.println statements.  The contents of the stack
//    are unaffected.
public void display() {
    Object anObject;
    StackReferenceBased tempStack = new StackReferenceBased();
    while (!isEmpty()) {
        anObject = pop();
        System.out.println(anObject);
        tempStack.push(anObject);
    }
    while (!tempStack.isEmpty()) {
        anObject = tempStack.pop();
        push(anObject);
    }
}


b.)

//Purpose:  to display all the items in the stack as a debugging aid.
//Preconditions:  none.
//Postconditions:  the contents of the stack are displayed with
//    System.out.println statements.  The contents of the stack
//    are unaffected.
public void display() {
    Object anObject;
    Node curr = top;
    while (curr!=null) {
        anObject = curr.getItem();
        System.out.println(anObject);
        curr = curr.getNext();
    }
}


6.>

//Purpose:  to determine if a string has balanced braces with
//    the delimiters (), [], and {}.
//Preconditions:  a String s is passed to the method.
//Postconditions:  if the String s is balanced true is returned
//    otherwise, false is returned.
public static boolean isBalanced(String s) {
    Character ch;
    Character topChar;
    StackReferenceBased stack = new StackReferenceBased();
    boolean balancedSoFar = true;
    int i = 0;
    while (balancedSoFar && i < s.length()) {
        ch = new Character(s.charAt(i));
        i++;
        if(ch.charValue()=='{' || ch.charValue()=='(' || ch.charValue()=='[')
            stack.push(ch);
        else if (ch.charValue()=='}')
            if (!stack.isEmpty()) {
                topChar = (Character)stack.pop();
                if (topChar.charValue()!='{')
                    balancedSoFar = false;
            } else
                balancedSoFar = false;
        else if (ch.charValue()==')')
            if (!stack.isEmpty()) {
                topChar = (Character)stack.pop();
                if (topChar.charValue()!='(')
                    balancedSoFar = false;
            } else
                balancedSoFar = false;
        else if (ch.charValue()==']')
            if (!stack.isEmpty()) {
                topChar = (Character)stack.pop();
                if (topChar.charValue()!='[')
                    balancedSoFar = false;
            } else
                balancedSoFar = false;
    }
    return (balancedSoFar && stack.isEmpty());
}


11.>

a.)

(bottom to top)
A
AB
ABD
ABDE
ABDEI
ABDEIC
ABDEI
ABDE
ABD
ABDF

b.)

(bottom to top)
D
DE
DEI
DEIC
DEICB
DEICBH
DEICBHG
DEICBH
DEICB
DEIC
DEI
DE
D
DF
D
(empty)
David J. Burger
                                                                                     Burger, David
                                                                                     ICS 211
                                                                                     Quiz 4
                                                                                     Due: 10/19/2000
