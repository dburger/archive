Dr. Peterson, here is my ICS 623 DES assignment.  In
completing it I wrote two programs.  One of the
programs does the same thing your des program did
except it used 8 bit CFB mode instead of ECB mode.
That program is called descfb.  The second program
I wrote decodes the ciphertext that you supplied us
with.  The name of that program is dessamp.

Here is the makefile that compiles my programs:
*******************************************************************************
dessamp: dessamp.o des.o desf.o f.o keycalc.o
	gcc dessamp.o des.o desf.o f.o keycalc.o -o dessamp

descfb: descfb.o des.o desf.o f.o keycalc.o
	gcc descfb.o des.o desf.o f.o keycalc.o -o descfb

des: des1.o des.o desf.o f.o keycalc.o
	gcc -g des1.o des.o desf.o f.o keycalc.o -o des

dessamp.o: dessamp.c des.h
	gcc -c dessamp.c

descfb.o: descfb.c des.h
	gcc -c descfb.c

des1.o: des1.c des.h
	gcc -c -g des1.c

des.o: des.c des.h
	gcc -c -g des.c

desf.o: desf.c des.h
	gcc -c -g desf.c

f.o: f.c des.h
	gcc -c -g f.c

keyclaclo: keycalc.c des.h
	gcc -c -g keycalc.c

*******************************************************************************



Here is the program descfb:
*******************************************************************************
/*=============================================================================
Assignment:  DES 8 bit CFB mode decryption.  This program does the encryption/
             decryption that Dr. Peterson's des1.c does, but it uses 8 bit
             CFB mode instead of ECB mode.

Author:      David J. Burger
Language:    ANSI C running on UHUNIX2 (Solaris)
Compile:     by running "make" with supplied makefile

Execute:     ./descfb

Class:       ICS 623
Instructor:  Dr. Peterson
Due Date:    09/10/01
=============================================================================*/
#include "des.h"

unsigned long lk = 0x01234567;    /* key  */
unsigned long rk = 0x89abcdef;

unsigned long liv = 0xcd647403;   /* initial vector */
unsigned long riv = 0xbc90c4c4;

/* cleartext is "Now is the time for all " */
unsigned long clear[6] = {0x4e6f7720, 0x69732074, 0x68652074,
                          0x696d6520, 0x666f7220, 0x616c6c20};

/* buffers to hold enciphered and deciphered text */
unsigned long enciph[6] = {0, 0, 0, 0, 0, 0};
unsigned long deciph[6] = {0, 0, 0, 0, 0, 0};

/* working buffers */
unsigned long ltemp, rtemp, clearByte, cryptByte;

unsigned long lkey[17];  /* calculated key schedule */
unsigned long rkey[17];

unsigned long getByteFromULong(unsigned long l, int byte);

int main(void) 
{
	int i,j; /* loop counters */

	keycalc();  //calculate the 16 keys

    //enciphering
    for (i=0;i<6;i++) /* the 6 long values */
        for (j=0;j<4;j++) { /* cycling the 4 bytes of the long */
            /* run the initial vector through desc */
            desc(liv,riv,&ltemp,&rtemp);

            cryptByte = getByteFromULong(ltemp,3); /* high byte out of des */
            clearByte = getByteFromULong(clear[i],(3-j)); /* clear byte */
            cryptByte = (cryptByte ^ clearByte); /* xor to get final encrypt */

            /* shifting the initial vector and adding the cryptByte */
            liv = (liv << 8) | getByteFromULong(riv,3);
            riv = (riv << 8) | cryptByte;

            /* adding another byte to the ciphered output */
            enciph[i] = (enciph[i] | (cryptByte  << (3 - j)*8));

        }
            
    liv = 0xcd647403;   /* initial vector are reset */
    riv = 0xbc90c4c4;   /* keys should still be ok  */

    //deciphering
    for (i=0;i<6;i++) /* once for each encrypted long value */
        for (j=0;j<4;j++) { /* once for each byte in the long */
            desc(liv,riv,&ltemp,&rtemp);

            cryptByte = getByteFromULong(ltemp,3); /* high byte out of des */
            clearByte = getByteFromULong(enciph[i],(3-j)); /* crypt byte */
            cryptByte = (cryptByte ^ clearByte); /* xor to get final decrypt */

            /* shifting the initial vector and adding the cryptByte */
            liv = (liv << 8) | getByteFromULong(riv,3);
            riv = (riv << 8) | clearByte;

            deciph[i] = (deciph[i] | (cryptByte  << (3 - j)*8));

        }

    /* output the results */
    printf("Key:        %08x %08x\n", lk, rk);
    printf("Plain text:\n");
    for(i = 0; i<6; i++) printf("            %08x\n", clear[i]);
    printf("Ciphertext:\n");
    for(i = 0; i<6; i++) printf("            %08x\n", enciph[i]);
    printf("Deciphertext:\n");
	for(i = 0; i<6; i++) printf("            %08x\n", deciph[i]);

	printf("Finished\n");
}

/* this function will return byte 0, 1, 2, or 3 from long l */
/* the return value consists of the byte isolated at byte 0 */
/* of the returned unsigned long                            */
unsigned long getByteFromULong(unsigned long l, int byte) {
    if (byte<0 || byte >3) return 0;
    return (l >> (byte*8)) & 0x000000ff;
}

/* Output
Enciphering
Key:        01234567 89abcdef
PlainText:  4e6f7720 69732074
PlainText:  68652074 696d6520
PlainText:  666f7220 616c6c20
Cyphertext: 3fa40e8a 984d4815
Cyphertext: 6a271787 ab8883f9
Cyphertext: 893d51ec 4b563b53


Deciphering
Key:        01234567 89abcdef
Cyphertext: 3fa40e8a 984d4815
Cyphertext: 6a271787 ab8883f9
Cyphertext: 893d51ec 4b563b53
Plaintext : 4e6f7720 69732074
Plaintext : 68652074 696d6520
Plaintext : 666f7220 616c6c20
Finished  */
*******************************************************************************



Here is the program dessamp:
*******************************************************************************
/*=============================================================================
Assignment:  DES 8 bit CFB mode decryption of the ciphertext supplied by Dr.
             Peterson.  The hex results and ascii results of the ciphertext
             are displayed on the screen.

Author:      David J. Burger
Language:    ANSI C running on UHUNIX2 (Solaris)
Compile:     by running "make" with supplied makefile

Execute:     ./dessamp

Class:       ICS 623
Instructor:  Dr. Peterson
Due Date:    09/10/01
=============================================================================*/
#include "des.h"

unsigned long lk = 0x843d0d08;    /* key  */
unsigned long rk = 0x34b2c4fa;

unsigned long liv = 0xcd647403;   /* initial vector */
unsigned long riv = 0xbc90c4c4;

/* the supplied ciphertext from Dr. Peterson */
unsigned long cipher[] = {0xe8d87407, 0xb3372ec6, 0x6159db44, 0x52705849,
                          0x88125b8b, 0xbfce80bd, 0xac3e87f2, 0x1ca983fd,
                          0xfc87c9fa, 0x39444844, 0x0b0803a6, 0x6142d0e0,
                          0x8a89b9cd, 0x98db0648, 0xf68abb1e, 0xb1ea4dbb,
                          0x46384dd5, 0xf95ab017, 0x03644738, 0xfcce447d,
                          0x19000000};

int realBytes = 81; /* the number of bytes that are real...not padding */

/* array to hold decrypted plain text */
unsigned long plain[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                         0, 0, 0, 0, 0, 0, 0, 0, 0};

unsigned long ltemp, rtemp, enciphByte, cryptByte; /* working long buffers */

unsigned long lkey[17];  /* calculated key schedule */
unsigned long rkey[17];

unsigned long getByteFromULong(unsigned long l, int byte);

int main(void) 
{
	int i,j; /* loop counters */
    int bytesOut = 0; /* to keep track of deciphered bytes written out */

	keycalc();  //calculate the 16 keys

    printf("Deciphering.......\n");
    for (i=0;i<21;i++) /* for the 21 longs of data */
        for (j=0;j<4;j++) { /* cycle through 4 bytes of a long */
            desc(liv,riv,&ltemp,&rtemp); /* run it through des */
            
            cryptByte = getByteFromULong(ltemp,3); /* grab the high byte */

            enciphByte = getByteFromULong(cipher[i],(3-j)); /* get crypt byte*/
            cryptByte = (cryptByte ^ enciphByte); /* xor them together */

            /* shift the initial vector adding the enciphByte */
            liv = (liv << 8) | getByteFromULong(riv,3);
            riv = (riv << 8) | enciphByte;

            /* add the decrypted byte to the plain text */
            plain[i] = (plain[i] | (cryptByte << (3 - j)*8));

        }
    /* output the results of the decryption */
    printf("Hex          ASCII\n");
	for(i = 0; i<21; i++) {
        printf(" %08x     ", plain[i]);
        for (j=3;j>=0;j--) {
            printf("%c",getByteFromULong(plain[i],j));
            if (++bytesOut==realBytes) break;/*don't print deciphered padding*/
        }
        printf("\n");
    }
}

/* this function will return byte 0, 1, 2, or 3 from long l */
/* the return value consists of the byte isolated at byte 0 */
/* of the returned unsigned long                            */
unsigned long getByteFromULong(unsigned long l, int byte) {
    if (byte<0 || byte >3) return 0;
    return (l >> (byte*8)) & 0x000000ff;
}

*******************************************************************************



Here are the results of running descfb:
*******************************************************************************
uhunix2:/home/23/dburger/classes/ics623/des% ./descfb
Key:        01234567 89abcdef
Plain text:
            4e6f7720
            69732074
            68652074
            696d6520
            666f7220
            616c6c20
Ciphertext:
            54a6124a
            e5e1e832
            f78f18b6
            26e213c3
            7b6e23b5
            0463fb03
Deciphertext:
            4e6f7720
            69732074
            68652074
            696d6520
            666f7220
            616c6c20
Finished             
*******************************************************************************

Here are the results of running dessamp:
*******************************************************************************
uhunix2:/home/23/dburger/classes/ics623/des% ./dessamp
Deciphering.......
Hex          ASCII
 53656372     Secr
 65742064     et d
 65206465     e de
 75782c20     ux,
 73656372     secr
 65742064     et d
 65204469     e Di
 65752c20     eu,
 73656372     secr
 65742064     et d
 65207472     e tr
 6f69732c     ois,
 20736563      sec
 72657420     ret
 64652074     de t
 6f75732e     ous.
 20284672      (Fr
 656e6368     ench
 2050726f      Pro
 76657262     verb
 294885ba     )   
*******************************************************************************

As you can see, the decrypted message is revealed to be a French Proverb.

thanks,
djb
