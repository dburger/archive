Dr. Peterson, here is my submission of the Unit 7 stuff involving modular
arithmetic with large numbers and GF.

1) How many elements are there in the group of elements modulo 40000 that
are relatively prime to 40000? What is the maximum possible order of a number
in this group? Calculate an element of this maximum order using the Chinese
remainder theorem and elements of maximum order modulo 2^6 and 5^4. (There
are a lot of such elements.)

phi(40000) = phi(2^6 * 5^4)
           = phi(2^6)phi(5^4) = 16000 relatively prime to 40000.

40000 = 2^6 * 5^4 so the maximum order possible is the LCM of the orders of
        Z*(2^6) and Z*(5^4).
        The order of Z*(2^6) is 16, and,
        the order of Z*(5^4) is 500.

        gcd(16,500) = 4, and gcd*lcm = 500*16
                               4*lcm = 500*16
                                 lcm = 500*4
                                 lcm = 2000 which is the maximum order.

3 is found to be of order 16 mod 2^6, and,
3 is a primitive element mod 5^4.

Using the Chinese Remainder Theorem and,

x = 3 mod 2^6
x = 3 mod 5^4

we get x = 3 to be an element of maximum order.

This seemed to be a trivial case so I solved the following:

x = 3 mod 2^6
x = 8 mod 5^4

and got x = 26883 as another element of maximum order.

Here is the program I wrote to do modular arithmetic,
first, the makefile:
===============================================================================
modtest: main.o modarith.o modarith.h
	gcc main.o modarith.o -o modtest
main.o: main.c modarith.h
	gcc main.c -c
modarith.o: modarith.c
	gcc modarith.c -c

===============================================================================
And here is my modarith.h:
===============================================================================
int addm(int a, int b, int m);
int subm(int a, int b, int m);
int mult2m(int a, int m);
int multm(int a, int b, int m);
int expm(int a, int b, int m);

int multgf(int a, int b, int m);
int expgf(int a, int b, int m);
int multXgf(int a, int m);
int addgf(int a, int b);
int subgf(int a, int b);
===============================================================================
An my modarith.c:
===============================================================================
/*=============================================================================
Assignment:  Modular Arithmetic
             
Author:      David J. Burger
Language:    ANSI C running on UHUNIX2 (Solaris)
Compile:     by running "make" with supplied makefile

Execute:     ./modtest

Class:       ICS 623
Instructor:  Dr. Peterson
Due Date:    10/22/01
===============================================================================
File:         modarith.c

Description:  this file contains the modular arithmetic functions.
              
Functions:    addm(ul a, ul b, ul m) - adds two numbers mod m

              subm(ul a, ul b, ul m) - subtracts two numbers mod m
              
              mult2m(ul a, ul m) - multiplies a number by 2 mod m
              
              multm(ul a, ul b, ul m) - multiplies two numbers mod m
              
              expm(ul a, ul b, ul m) - raises a number to a power mod m
                            
              multXgf(ul a, ul m) - does GF multiplication by x mod p(x)

              addgf(ul a, ul b) - does GF addition

              subgf(ul a, ul b) - does GF subtraction

              multgf(ul a, ul b, ul m) - does GF mutiplication mod p(x)

              expgf(ul a, ul b, ul m) - does exponentiation mod p(x)
=============================================================================*/

typedef unsigned long ul;

/*=============================================================================
Function addm

Purpose:  add two numbers mod m
          
Parameters:
     ul a (IN) - first operand
     ul b (IN) - second operand
     ul m (IN) - modulus

Returns:  a + b mod m
=============================================================================*/
ul addm(ul a, ul b, ul m) {
  ul t = a + b;
  if (t>=m) t-=m;
  return t;
}

/*=============================================================================
Function subm

Purpose:  subtracts two numbers mod m
          
Parameters:
     ul a (IN) - first operand
     ul b (IN) - second operand
     ul m (IN) - modulus

Returns:  a - b mod m
=============================================================================*/
ul subm(ul a, ul b, ul m) {
  if (a>=b)
    return a - b;
  else
    return (m - b) + a;
}

/*=============================================================================
Function mult2m

Purpose:  multiplies a number by 2 mod m
          
Parameters:
     ul a (IN) - operand
     ul m (IN) - modulus

Returns:  a * 2 mod m
=============================================================================*/
ul mult2m(ul a, ul m) {
  ul t=a<<1;
  if (t>=m) t-=m;
  return t;
}

/*=============================================================================
Function multm

Purpose:  multiplies two numbers mod m
          
Parameters:
     ul a (IN) - first operand
     ul b (IN) - second operand
     ul m (IN) - modulus

Returns:  a * b mod m
=============================================================================*/
ul multm(ul a, ul b, ul m) {
  ul mask = 0x80000000;
  ul i;
  ul t=0;
  for (i=0;i<32;i++) {
    t = mult2m(t,m);
    if (b&mask) t=addm(t,a,m);
    mask>>=1;
  }
  return t;
}

/*=============================================================================
Function expm

Purpose:  take a number to a power mod m
          
Parameters:
     ul a (IN) - first operand
     ul b (IN) - second operand
     ul m (IN) - modulus

Returns:  a to power b mod m
=============================================================================*/
ul expm(ul a, ul b, ul m) {
  ul mask = 0x80000000;
  ul i;
  ul t=1;
  for (i=0;i<32;i++) {
    t = multm(t,t,m);
    if (b&mask) t=multm(t,a,m);
    mask>>=1;
  }
  return t;
}

/*=============================================================================
Function makedegpoly

Purpose:  this function takes in an unsigned long representing a polynomial and
          returns a polynomial representing the degree of that polynomial.
          That is, it only has a bit it the position of the degree of the
          polynomial.
          
Parameters:
     ul n (IN) - polynomial to return degree polynomial of

Returns:  the degree polynomail for n
=============================================================================*/
ul makedegpoly(ul n) {
    int i;
    ul mask = 0x80000000;
    for (i=0;i<32;i++) {
        if (mask&n) return mask;
        mask>>1;
    }
    return mask;
}

/*=============================================================================
Function multXgf

Purpose:  mutiplies a value by X in a GF mod p(x)
          
Parameters:
     ul a (IN) - operand
     ul m (IN) - modulus polynomial p(x)

Returns:  a * X mod m
=============================================================================*/
ul multXgf(ul a, ul m) {
  ul mask = makedegpoly(m);
  ul t=a<<1;
  if (t&mask) t^=m;
  return t;
}

/*=============================================================================
Function addgf

Purpose:  add two numbers in a GF
          
Parameters:
     ul a (IN) - first operand
     ul b (IN) - second operand

Returns:  a + b
=============================================================================*/
ul addgf(ul a, ul b) {
  return a ^ b;
}

/*=============================================================================
Function subgf

Purpose:  subtracts two numbers in a GF
          
Parameters:
     ul a (IN) - first operand
     ul b (IN) - second operand

Returns:  a - b
=============================================================================*/
ul subgf(ul a, ul b) {
  return a ^ b;
}

/*=============================================================================
Function multgf

Purpose:  multiplies two numbers in a GF mod polynomial p(x)
          
Parameters:
     ul a (IN) - first operand
     ul b (IN) - second operand
     ul m (IN) - modulus polynomial p(x)

Returns:  a * b mod m
=============================================================================*/
ul multgf(ul a, ul b, ul m) {
  ul mask = makedegpoly(m);
  ul i;
  ul t=0;
  for (i=0;i<32;i++) {
    t = multXgf(t,m);
    if (b&mask) t=addgf(t,a);
    mask>>=1;
  }
  return t;
}

/*=============================================================================
Function expgf

Purpose:  take a number to a power mod polynomial p(x)
          
Parameters:
     ul a (IN) - first operand
     ul b (IN) - second operand
     ul m (IN) - modulus polynomial p(x)

Returns:  a to the power b mod m
=============================================================================*/
ul expgf(ul a, ul b, ul m) {
  ul mask = makedegpoly(m);
  ul i;
  ul t=1;
  for (i=0;i<32;i++) {
    t = multgf(t,t,m);
    if (b&mask) t=multgf(t,a,m);
    mask>>=1;
  }
  return t;
}
===============================================================================
And main.c which contains the main entry point to the program:
===============================================================================
/*=============================================================================
Assignment:  Modular Arithmetic
             
Author:      David J. Burger
Language:    ANSI C running on UHUNIX2 (Solaris)
Compile:     by running "make" with supplied makefile

Execute:     ./modtest

Class:       ICS 623
Instructor:  Dr. Peterson
Due Date:    10/22/01
===============================================================================
File:         main.c

Description:  
              
Functions:    main - the main entry point to the program.  Puts the modular
              arithmetic functions through several demonstrations.
=============================================================================*/
#include <stdio.h>

#include "modarith.h"
/*=============================================================================
Function main

Purpose:  the main entry point for the program, puts the modular arithmetic
          functions through several tests
          
Parameters:
     int argc (IN) - a count of the number of command line paramters, not used
     char *argv[] (IN) - an array of char *'s to the command line parameters,
                         not used
Returns:  nothing
=============================================================================*/
int main(int argc, char* argv[]) {

  int p = 2147483629;
  int n = 23;
  int t = 1;
  int i;

  unsigned long poly = 0x80000009;
  int b = 0x00001007;  

  printf("First multiplying by 23:\n");
  for (i=1;i<30;i++) {
    t = multm(t,n,p);
    printf("%d^%d = %08x\n",n,i,t);
  }
  printf("=======================\n");

  printf("Now 23^15 * 23^14:\n");
  printf("23^15 * 23^14 = %08x\n",multm(0x3d5a3329,0x18eda92b,p));
  printf("=======================\n");

  printf("Now using fast exponentiation:\n");
  for(i=1;i<30;i++) {
    printf("%d^%d = %08x\n",n,i,expm(n,i,p));
  }
  printf("=======================\n");

  printf("Raising %d^5 to p-1:\n",n);
  printf("(%d^5)^p-1 = %08x\n",n,expm(expm(n,5,p),p-1,p));
  printf("=======================\n");

  printf("Raising %d^5 to p-2 and then multiplying by %d^5:\n",n,n);
  printf("(%d^5)^p-2 * (%d^5) = %08x\n",n,n,multm(expm(expm(n,5,p),p-2,p),expm(n,5,p),p));
  printf("=======================\n");

  printf("Taking x^12 + x^2 + x + 1 to succesive powers by multiplying:\n");
  t = 1;
  for(i=1;i<30;i++) {
    t = multgf(t,b,poly);
    printf("b^%d = %08x\n",i,t);
  }
  printf("=======================\n");

  printf("Now b^15 * b^14:\n");
  printf("b^15 * b^14 = %08x\n",multgf(expgf(b,15,poly),expgf(b,14,poly),poly));
  printf("=======================\n");

  printf("Taking x^12 + x^2 + x + 1 with exponentiation:\n");
  for(i=1;i<30;i++) {
    printf("b^%d = %08x\n",i,expgf(b,i,poly));
  }
  printf("=======================\n");

  printf("Raising b^10 to p-1:\n");
  printf("(b^10)^p-1 = %08x\n",expm(expgf(b,10,poly),p-1,p));
  printf("=======================\n");

  printf("Raising b^10 to p-2 and then multiplying by b^10:\n");
  printf("(b^10)^p-2 * (b^10) = %08x\n",multm(expm(expgf(b,10,poly),p-2,p),expgf(b,10,poly),p));
  printf("=======================\n");

}
===============================================================================
Finally, here is the result of running my program:
===============================================================================
uhunix2:/home/23/dburger/classes/ics623/modarith% ./modtest
First multiplying by 23:
23^1 = 00000017
23^2 = 00000211
23^3 = 00002f87
23^4 = 00044521
23^5 = 006235f7
23^6 = 08d2d931
23^7 = 4af1837a
23^8 = 3bb2d0ed
23^9 = 5d10c609
23^10 = 5c81cbff
23^11 = 4fa95519
23^12 = 2836a649
23^13 = 1ce8f114
23^14 = 18eda92b
23^15 = 3d5a3329
23^16 = 031a9980
23^17 = 4763ca80
23^18 = 69f73264
23^19 = 05358865
23^20 = 77cf4113
23^21 = 439eda44
23^22 = 13459d00
23^23 = 3b411b39
23^24 = 52d972dd
23^25 = 718952e5
23^26 = 3356740f
23^27 = 1cc46e04
23^28 = 15a5e2bb
23^29 = 71e75f06
=======================
Now 23^15 * 23^14:
23^15 * 23^14 = 71e75f06
=======================
Now using fast exponentiation:
23^1 = 00000017
23^2 = 00000211
23^3 = 00002f87
23^4 = 00044521
23^5 = 006235f7
23^6 = 08d2d931
23^7 = 4af1837a
23^8 = 3bb2d0ed
23^9 = 5d10c609
23^10 = 5c81cbff
23^11 = 4fa95519
23^12 = 2836a649
23^13 = 1ce8f114
23^14 = 18eda92b
23^15 = 3d5a3329
23^16 = 031a9980
23^17 = 4763ca80
23^18 = 69f73264
23^19 = 05358865
23^20 = 77cf4113
23^21 = 439eda44
23^22 = 13459d00
23^23 = 3b411b39
23^24 = 52d972dd
23^25 = 718952e5
23^26 = 3356740f
23^27 = 1cc46e04
23^28 = 15a5e2bb
23^29 = 71e75f06
=======================
Raising 23^5 to p-1:
(23^5)^p-1 = 00000001
=======================
Raising 23^5 to p-2 and then multiplying by 23^5:
(23^5)^p-2 * (23^5) = 00000001
=======================
Taking x^12 + x^2 + x + 1 to succesive powers by multiplying:
b^1 = 00001007
b^2 = 01000015
b^3 = 0701514b
b^4 = 00120111
b^5 = 206f1765
b^6 = 107b1057
b^7 = 406413d2
b^8 = 00011349
b^9 = 1133e8ff
b^10 = 491479eb
b^11 = 38f39db8
b^12 = 13016fcf
b^13 = 6ffaee0d
b^14 = 21043836
b^15 = 249fedab
b^16 = 01051053
b^17 = 561e4099
b^18 = 46520f0f
b^19 = 734e93ac
b^20 = 31d34777
b^21 = 214f93a6
b^22 = 1fd4bf1a
b^23 = 14de816c
b^24 = 060f5047
b^25 = 6728c71c
b^26 = 39abfe8b
b^27 = 13bb7725
b^28 = 4d520434
b^29 = 42fd186d
=======================
Now b^15 * b^14:
b^15 * b^14 = 42fd186d
=======================
Taking x^12 + x^2 + x + 1 with exponentiation:
b^1 = 00001007
b^2 = 01000015
b^3 = 0701514b
b^4 = 00120111
b^5 = 206f1765
b^6 = 107b1057
b^7 = 406413d2
b^8 = 00011349
b^9 = 1133e8ff
b^10 = 491479eb
b^11 = 38f39db8
b^12 = 13016fcf
b^13 = 6ffaee0d
b^14 = 21043836
b^15 = 249fedab
b^16 = 01051053
b^17 = 561e4099
b^18 = 46520f0f
b^19 = 734e93ac
b^20 = 31d34777
b^21 = 214f93a6
b^22 = 1fd4bf1a
b^23 = 14de816c
b^24 = 060f5047
b^25 = 6728c71c
b^26 = 39abfe8b
b^27 = 13bb7725
b^28 = 4d520434
b^29 = 42fd186d
=======================
Raising b^10 to p-1:
(b^10)^p-1 = 00000001
=======================
Raising b^10 to p-2 and then multiplying by b^10:
(b^10)^p-2 * (b^10) = 00000001
=======================
uhunix2:/home/23/dburger/classes/ics623/modarith% make
gcc modarith.c -c
gcc main.o modarith.o -o modtest
uhunix2:/home/23/dburger/classes/ics623/modarith% ./modtest
First multiplying by 23:
23^1 = 00000017
23^2 = 00000211
23^3 = 00002f87
23^4 = 00044521
23^5 = 006235f7
23^6 = 08d2d931
23^7 = 4af1837a
23^8 = 3bb2d0ed
23^9 = 5d10c609
23^10 = 5c81cbff
23^11 = 4fa95519
23^12 = 2836a649
23^13 = 1ce8f114
23^14 = 18eda92b
23^15 = 3d5a3329
23^16 = 031a9980
23^17 = 4763ca80
23^18 = 69f73264
23^19 = 05358865
23^20 = 77cf4113
23^21 = 439eda44
23^22 = 13459d00
23^23 = 3b411b39
23^24 = 52d972dd
23^25 = 718952e5
23^26 = 3356740f
23^27 = 1cc46e04
23^28 = 15a5e2bb
23^29 = 71e75f06
=======================
Now 23^15 * 23^14:
23^15 * 23^14 = 71e75f06
=======================
Now using fast exponentiation:
23^1 = 00000017
23^2 = 00000211
23^3 = 00002f87
23^4 = 00044521
23^5 = 006235f7
23^6 = 08d2d931
23^7 = 4af1837a
23^8 = 3bb2d0ed
23^9 = 5d10c609
23^10 = 5c81cbff
23^11 = 4fa95519
23^12 = 2836a649
23^13 = 1ce8f114
23^14 = 18eda92b
23^15 = 3d5a3329
23^16 = 031a9980
23^17 = 4763ca80
23^18 = 69f73264
23^19 = 05358865
23^20 = 77cf4113
23^21 = 439eda44
23^22 = 13459d00
23^23 = 3b411b39
23^24 = 52d972dd
23^25 = 718952e5
23^26 = 3356740f
23^27 = 1cc46e04
23^28 = 15a5e2bb
23^29 = 71e75f06
=======================
Raising 23^5 to p-1:
(23^5)^p-1 = 00000001
=======================
Raising 23^5 to p-2 and then multiplying by 23^5:
(23^5)^p-2 * (23^5) = 00000001
=======================
Taking x^12 + x^2 + x + 1 to succesive powers by multiplying:
b^1 = 00001007
b^2 = 01000015
b^3 = 0701514b
b^4 = 00120111
b^5 = 206f1765
b^6 = 107b1057
b^7 = 406413d2
b^8 = 00011349
b^9 = 1133e8ff
b^10 = 491479eb
b^11 = 38f39db8
b^12 = 13016fcf
b^13 = 6ffaee0d
b^14 = 21043836
b^15 = 249fedab
b^16 = 01051053
b^17 = 561e4099
b^18 = 46520f0f
b^19 = 734e93ac
b^20 = 31d34777
b^21 = 214f93a6
b^22 = 1fd4bf1a
b^23 = 14de816c
b^24 = 060f5047
b^25 = 6728c71c
b^26 = 39abfe8b
b^27 = 13bb7725
b^28 = 4d520434
b^29 = 42fd186d
=======================
Now b^15 * b^14:
b^15 * b^14 = 42fd186d
=======================
Taking x^12 + x^2 + x + 1 with exponentiation:
b^1 = 00001007
b^2 = 01000015
b^3 = 0701514b
b^4 = 00120111
b^5 = 206f1765
b^6 = 107b1057
b^7 = 406413d2
b^8 = 00011349
b^9 = 1133e8ff
b^10 = 491479eb
b^11 = 38f39db8
b^12 = 13016fcf
b^13 = 6ffaee0d
b^14 = 21043836
b^15 = 249fedab
b^16 = 01051053
b^17 = 561e4099
b^18 = 46520f0f
b^19 = 734e93ac
b^20 = 31d34777
b^21 = 214f93a6
b^22 = 1fd4bf1a
b^23 = 14de816c
b^24 = 060f5047
b^25 = 6728c71c
b^26 = 39abfe8b
b^27 = 13bb7725
b^28 = 4d520434
b^29 = 42fd186d
=======================
Raising b^10 to p-1:
(b^10)^p-1 = 00000001
=======================
Raising b^10 to p-2 and then multiplying by b^10:
(b^10)^p-2 * (b^10) = 00000001
=======================
