Hello Dr. Peterson, here is my submission for the long arithmetic
assignment.  First you will see the source code from my program
and after that you will see the output it produced:

Here is my makefile:

***********************************************************************
longtest: long.o main.o
	gcc long.o main.o -o longtest
main.o: main.c long.h
	gcc main.c -c
long.o: long.c
	gcc long.c -c


***********************************************************************

Here is my header file long.h:

***********************************************************************
typedef unsigned long UL;

int add(UL *a, UL *b, int c);
int sub(UL *a, UL *b, int c);
int shl(UL *a, int b);

int mcmp(UL *a, UL *b);
void madd(UL *a, UL *b, UL *P);
void msub(UL *a, UL *b, UL *P);
void mshl(UL *a, UL *P);
void mexp(UL *a, UL *b, UL *result, UL *P);
void mmult(UL *a, UL *b, UL *result, UL *P);
void zeroUL(UL *a, int size);
***********************************************************************

Here is my long arithmetic file long.c:

***********************************************************************
/*=============================================================================
Assignment: long arithmetic
Author:     David J. Burger
Language:   ANSI C running on UHUNIX2 (Solaris)
Compile:    by running "make" with included makefile

Class:      ICS 623
Instructor: Dr. Peterson
Due Date:   11/05/01
===============================================================================
File:         long.c

Description:  this file contains various long arithmetic functions.  The first
              functions in the file are those supplied by Dr. Peterson.
=============================================================================*/

#include "long.h"

/* This adds the 512-bit number that b points   */
/* to to the 512-bit number that a points to.   */
/* c is assumed to be 0 or 1, the carry in,     */
/* and is added to the sum. The carry out of    */
/* the highest-order word (1 or 0) is returned. */

int add(UL *a, UL *b, int c)
{
    UL t;
    t = a[15] + b[15];
    a[15] = t+c;
    c = t<b[15] || t==0xffffffff && c==1;
    t = a[14] + b[14];
    a[14] = t+c;
    c = t<b[14] || t==0xffffffff && c==1;
    t = a[13] + b[13];
    a[13] = t+c;
    c = t<b[13] || t==0xffffffff && c==1;
    t = a[12] + b[12];
    a[12] = t+c;
    c = t<b[12] || t==0xffffffff && c==1;
    t = a[11] + b[11];
    a[11] = t+c;
    c = t<b[11] || t==0xffffffff && c==1;
    t = a[10] + b[10];
    a[10] = t+c;
    c = t<b[10] || t==0xffffffff && c==1;
    t = a[9] + b[9];
    a[9] = t+c;
    c = t<b[9] || t==0xffffffff && c==1;
    t = a[8] + b[8];
    a[8] = t+c;
    c = t<b[8] || t==0xffffffff && c==1;
    t = a[7] + b[7];
    a[7] = t+c;
    c = t<b[7] || t==0xffffffff && c==1;
    t = a[6] + b[6];
    a[6] = t+c;
    c = t<b[6] || t==0xffffffff && c==1;
    t = a[5] + b[5];
    a[5] = t+c;
    c = t<b[5] || t==0xffffffff && c==1;
    t = a[4] + b[4];
    a[4] = t+c;
    c = t<b[4] || t==0xffffffff && c==1;
    t = a[3] + b[3];
    a[3] = t+c;
    c = t<b[3] || t==0xffffffff && c==1;
    t = a[2] + b[2];
    a[2] = t+c;
    c = t<b[2] || t==0xffffffff && c==1;
    t = a[1] + b[1];
    a[1] = t+c;
    c = t<b[1] || t==0xffffffff && c==1;
    t = a[0] + b[0];
    a[0] = t+c;
    c = t<b[0] || t==0xffffffff && c==1;
    return c;
}
/* This sutracts the 512-bit word that b points   */
/* to from the 512-bit number that a points to.   */
/* c (1 or 0) is subtracted from the result, and  */
/* if there is a borrow out of the high end, it   */
/* (1 or 0) is returned.                          */
int sub(UL *a, UL *c, int b1)
{
    int b2;
    b2 = a[15]<c[15] || a[15]==c[15] && b1==1;
    a[15] -= c[15]+b1;
    b1 = a[14]<c[14] || a[14]==c[14] && b2==1;
    a[14] -= c[14]+b2;
    b2 = a[13]<c[13] || a[13]==c[13] && b1==1;
    a[13] -= c[13]+b1;
    b1 = a[12]<c[12] || a[12]==c[12] && b2==1;
    a[12] -= c[12]+b2;
    b2 = a[11]<c[11] || a[11]==c[11] && b1==1;
    a[11] -= c[11]+b1;
    b1 = a[10]<c[10] || a[10]==c[10] && b2==1;
    a[10] -= c[10]+b2;
    b2 = a[9]<c[9] || a[9]==c[9] && b1==1;
    a[9] -= c[9]+b1;
    b1 = a[8]<c[8] || a[8]==c[8] && b2==1;
    a[8] -= c[8]+b2;
    b2 = a[7]<c[7] || a[7]==c[7] && b1==1;
    a[7] -= c[7]+b1;
    b1 = a[6]<c[6] || a[6]==c[6] && b2==1;
    a[6] -= c[6]+b2;
    b2 = a[5]<c[5] || a[5]==c[5] && b1==1;
    a[5] -= c[5]+b1;
    b1 = a[4]<c[4] || a[4]==c[4] && b2==1;
    a[4] -= c[4]+b2;
    b2 = a[3]<c[3] || a[3]==c[3] && b1==1;
    a[3] -= c[3]+b1;
    b1 = a[2]<c[2] || a[2]==c[2] && b2==1;
    a[2] -= c[2]+b2;
    b2 = a[1]<c[1] || a[1]==c[1] && b1==1;
    a[1] -= c[1]+b1;
    b1 = a[0]<c[0] || a[0]==c[0] && b2==1;
    a[0] -= c[0]+b2;
    return b1;
}
/* This shifts a left one bit. c (1 or 0)    */
/* is shifted into the lowest order position */
/* and the bit (1 or 0) shifted out of the   */
/* highest order position is returned.       */
int shl(UL *a, int c)
{
    int c1;
    c1 = a[0]>>31;
    a[0] = (a[0]<<1) | a[1]>>31;
    a[1] = (a[1]<<1) | a[2]>>31;
    a[2] = (a[2]<<1) | a[3]>>31;
    a[3] = (a[3]<<1) | a[4]>>31;
    a[4] = (a[4]<<1) | a[5]>>31;
    a[5] = (a[5]<<1) | a[6]>>31;
    a[6] = (a[6]<<1) | a[7]>>31;
    a[7] = (a[7]<<1) | a[8]>>31;
    a[8] = (a[8]<<1) | a[9]>>31;
    a[9] = (a[9]<<1) | a[10]>>31;
    a[10] = (a[10]<<1) | a[11]>>31;
    a[11] = (a[11]<<1) | a[12]>>31;
    a[12] = (a[12]<<1) | a[13]>>31;
    a[13] = (a[13]<<1) | a[14]>>31;
    a[14] = (a[14]<<1) | a[15]>>31;
    a[15] = (a[15]<<1) | c;
    return c1;
}

/* Here are several 1023-bit mod P functions: */

/* Return negative,if a<b, zero if */
/* a=b and positive if a>b.        */
int mcmp(UL *a, UL *b)
{
	int i;
	for(i = 0; i<32; i++) {
		if(a[i]>b[i]) return 1;
		if(a[i]<b[i]) return -1;
	}
	return 0;
}

/* add b to a */
void madd(UL *a, UL *b, UL *P)
{
	add(a, b, add(a+16, b+16, 0));
	if(mcmp(a, P)>=0) sub(a, P, sub(a+16, P+16, 0));
}

/* subtract b from a */
void msub(UL *a, UL *b, UL *P)
{
	if(sub(a, b, sub(a+16, b+16, 0))) 
		add(a, P, add(a+16, P+16, 0));
}

/* shift a left one bit  */
void mshl(UL *a, UL *P)
{
	shl(a, shl(a+16, 0));
	if(mcmp(a, P)>=0) sub(a, P, sub(a+16, P+16, 0));
}

/*=============================================================================
Function mmult

Purpose:  mutiply a by b mod P and put the result in result
          
Parameters:
          *a - first operator
          *b - second operator
          *result - where the result is placed
          *P - modulus
          
Returns:  nothing, result of multiplication is placed in result
=============================================================================*/
void mmult(UL *a, UL *b, UL *result, UL *P) {
  int i,j;
  UL mask;
  UL t[32];
  zeroUL(t,32);
  /* looping through the 32 words */
  for (i=0;i<32;i++) {
    mask = 0x80000000;
    /* looping through the 32 bits */
    for (j=0;j<32;j++) {
      mshl(t,P);
      if (b[i] & mask) madd(t,a,P);
      mask>>=1;
    }
  }

  /* answer is in t[], put in result */
  for (i=0;i<32;i++)
    result[i] = t[i];

}

/*=============================================================================
Function mexp

Purpose:  take a to the power b mod P and put result in result
          
Parameters:
          *a - base of exponentiation
          *b - exponent
          *result - where the result is placed
          *P - modulus
          
Returns:  nothing, result of exponentiation is placed in result
=============================================================================*/
void mexp(UL *a, UL *b, UL *result, UL *P) {
  int i,j;
  UL mask;
  UL t[32];
  zeroUL(t,32);
  t[31] = 1;
  /* looping through the 32 words */
  for (i=0;i<32;i++) {
    mask = 0x80000000;
    /* looping through the 32 bits */
    for (j=0;j<32;j++) {
      mmult(t,t,t,P);
      if (b[i] & mask) mmult(t,a,t,P);
      mask>>=1;
    }
  }

  /* answer is in t[], put in result */
  for (i=0;i<32;i++)
    result[i] = t[i];

}

/*=============================================================================
Function zeroUL

Purpose:  used to "zero out" the values in an unsigned long array
          
Parameters:
          *a - array to zero out
          size - number of values to zero out
          
Returns:  nothing, size values in a are set to 0
=============================================================================*/
void zeroUL(UL *a, int size) {
  while (--size>=0) a[size] = 0;
}
***********************************************************************

And here is my main.c file that runs the whole thing:

***********************************************************************
/*=============================================================================
Assignment: long arithmetic
Author:     David J. Burger
Language:   ANSI C running on UHUNIX2 (Solaris)
Compile:    by running "make" with included makefile

Class:      ICS 623
Instructor: Dr. Peterson
Due Date:   11/05/01
===============================================================================
File:         main.c

Description:  this program demonstrates various long arithmetic functions
              performing the computations described in the assignment notes
=============================================================================*/
#include <stdio.h>

#include "long.h"

/*=============================================================================
Function printUL

Purpose:  prints the hex value of an array of size unsigned longs
          
Parameters:
          *p - array containing the unsigned longs
          size - number of unsigned longs to print from the array
          
Returns:  nothing, outputs hex values of the unsigned longs on the screen
=============================================================================*/
void printUL(UL *p, int size) {
    int i;
    for (i=0;i<size;i++) {
        printf("%08x",p[i]);
        if (i!=0 && (i+1)%8==0)
            printf("\n");
        else
            printf(" ");
    }
}

/*=============================================================================
Function copyUL

Purpose:  copies size unsigned long values from a to b
          
Parameters:
          *a - array containing unsigned longs to copy
          *b - array to copy to
          size - number of unsigned longs to copy from a to b
          
Returns:  nothing, size values are copied from a to b
=============================================================================*/
void copyUL(UL *a, UL *b, int size) {
  while (--size>=0) b[size] = a[size];
}

/*=============================================================================
Function main

Purpose:  main entry point to program.  Demonstrates various long arithmetic
          operations as described in the assignment notes.
          
Parameters:
          argc - number of command line parameters passed to program
          *argv[] - array of pointers to command line strings
          
Returns:  nothing, arithmetic operations on long numbers are performed
=============================================================================*/
int main(int argc, char *argv[]) {
  
  int i,j; /* used as counters */

  UL P[] = { 0x79bb6329, 0x178e36f8, 0xad8199a4, 0xc396028d, 
             0xffdbfc5d, 0xc6ca1f85, 0x511b0c61, 0x02b750d0, 
             0x6ad206b9, 0x901d2a81, 0x64e7576c, 0x36660938, 
             0x59fe0e70, 0x03ef65b5, 0xda9f1c1c, 0xffa5bf00, 
             0xb63f7338, 0x1a2605b1, 0x8c2de924, 0xede9bbe1, 
             0xc27a570d, 0xc449b2cd, 0xa8e6bc21, 0x781112c0, 
             0x80e9d6bc, 0x6f88d739, 0xf2f7dfd4, 0xb2c24f99, 
             0x5d6d4ca1, 0xdc497fe8, 0x8a2e2814, 0x6b73f64f };


  UL m[32], t[32], result[32], power[32], m20[32], m25[32], m45[32];

  printf("powers using multiplication:\n");
  zeroUL(m,32);
  m[31] = 0x08d2d931;
  zeroUL(result,32);
  result[31] = 1;
  for (i=1;i<50;i++) {
    printf("m^%d==\n",i);
    mmult(result,m,result,P);
    printUL(result,32);
    if (i==20) copyUL(result,m20,32);
    if (i==25) copyUL(result,m25,32);
    if (i==45) copyUL(result,m45,32);
  }

  printf("m^20 * m^25==");
  mmult(m20,m25,result,P);
  if (mcmp(result,m45)==0) printf("m^45\n");
  printUL(result,32);

  printf("m^25 * m^20==");
  mmult(m25,m20,result,P);
  if (mcmp(result,m45)==0) printf("m^45\n");
  printUL(result,32);

  zeroUL(t,32);
  zeroUL(m,32);
  m[31] = 0x08d2d931;  
  printf("powers using exponentiation:\n");
  for (i=0;i<50;i++) {
    printf("m^%d==\n",i);
    mexp(m,t,result,P);
    printUL(result,32);
    t[31]++;
  }

  zeroUL(t,32);
  t[31] = 1;
  copyUL(P,power,32);
  msub(power,t,P);
  printf("(m^45)^P-1==");
  mexp(m45,power,result,P);
  if (mcmp(t,result)==0) printf("1\n");
  printUL(result,32);

  msub(power,t,P);
  printf("(m^20)^P-2 * m^20==");
  mexp(m20,power,result,P);
  mmult(m20,result,result,P);
  if (mcmp(result,t)==0) printf("1\n");
  printUL(result,32);
 

}
***********************************************************************

And here is the output from running my program:

***********************************************************************
uhunix2:/home/23/dburger/classes/ics623/longa% ./longtest
powers using multiplication:
m^1==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 08d2d931
m^2==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 004ddb3c 1ca81b61
m^3==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 0002aef9 c5f1ad8d 78f47691
m^4==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 000017ad 9de92445 8933ffd9 2a3d9ac1
m^5==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 000000d0 ed718577 c6b30f43 0049a0be 484a37f1
m^6==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000007 337f948d e753aab7 6d2e407d 45b2ae54 2b51fe21
m^7==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 3f8a5754 4bfa1836 f89a2a9c eb754a14 6f5ed008 4a2d9d51
m^8==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 0230a81e b3074f73 1e41fb0c 1fb5fc26 e57cd297 989b1ecc 7186c581
m^9==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00135306 88994a1c 3c1faba7 095e075d 63a662f2 3886d795 5a0d8817 040826b1
m^10==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000aa82
b4b44619 c2336db6 61e11146 74f683ec d92ed7a0 a1e12846 0ff41eb7 f38d70e1
m^11==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 000005e0 85874c43
b5202a29 7682ec0a e32cadf8 f816a398 2d9242ec 1134d025 ee460436 23535411
m^12==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000033 db563487 ebbe9331
d09c862a a12c28bc d9018ea1 a14342d3 f9e8ad98 fe1ba3cd 1a7c4749 e3278041
m^13==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000001 c9909d34 64e49bc6 f7a16af4
ffb16846 99adefd3 e8d3b1e5 5337bfb4 40213978 d836d1e2 33ecd91a 3398a571
m^14==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 0fc561bd c21168f3 18c1a6be 9e86706c
11104df5 35b12322 1b087228 130920e9 5bf682ef 1794e962 9d77dc23 832673a1
m^15==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 008b2859 705b4c62 977b8294 a0babca7 e635a0f5
b3075ada 508212f0 3ad9b852 abf23fed 7009ba33 45262e8e 6ec6061f 94719ad1
m^16==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 0004cbdf f4b78ea3 a2d550ac 7345a9c5 0e94f34c 3cd92aa7
da058d52 b5da5639 9a1afa4b 1dd4b637 08ea0434 3e12b3cb 11a342e7 3d6bcb01
m^17==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00002a52 4f185755 8e5d3fda 8d475b2b 895825de 032ee4a5 f73a76e7
f36328c7 69f2969b 07e0b2d9 35982730 27269793 911d1dd5 df919217 af87b431
m^18==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000175 6de5837f 1651ef8a 80ab99f8 acf1c63f 023083ce 1ba91401 aadc2052
527054ae 4c83b943 7977120a e210a3cc 28750c11 9d4af26c c49d4545 f8e90661
m^19==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000000c
df002403 6c57c3f1 8d5e2a28 29c1afb8 a313aad5 1af2e938 140747bb 61a31a6d
e8a6d610 6266041d 5213a47a 1ec440c3 68ff9cc1 e634cca7 f50009bc 6e947191
m^20==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 7191dabb
73bf699c 6a752aa0 b7026b75 1694880b ae3a092f 20cfd4ec b3f5c140 0f0d48cb
0fe6c45b 99a19570 19515e77 7a0a27fc 6b0ddaf4 f3048528 cd49f01e af9fa5c1
m^21==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 03ea18d5 a8b6b14f
edcbca9f af1d973b e34dfba5 30c6acd0 8c941df9 830fb37c 49de0d31 335150c8
978e4dfa 7658ef9e 0b78c8e5 a83ede44 80c808bf da9fc8fa e65a06e1 f16152f1
m^22==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00228a21 3b65f850 1a44205f
7739b700 88169bf9 33446957 05fbcd84 d8883d57 83693df7 b8a5de25 49534408
6d7e17b3 8a240455 8e0f1a16 f6a880a3 61eaa264 fef5eb59 1bf3e348 44a12921
m^23==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 000130c3 a6d0851e 00881a7e 5084b965
e0dbd1e0 f2904890 eef5b4b5 5425d3a5 fbf80268 efa67ef0 55ede0b8 aff0ec99
e4d22b24 33305aff 1c8d0fb8 ac60c4d2 00618689 198921ea c8c4187e 83c7d851
m^24==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000a81 2045890f d16099ab 26a45719 2f282afb
9116564a c97c717f ea9580ad f9ada6df b61533c5 a44df0ff 33046b83 cb10022b
781771d4 678d7e3c b433f9ff 09a30ab9 62f83270 49de53be b232469d 9a0f1081
m^25==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 0000005c afd81c65 0c026a8d 5d5a530b ef6af516 32052f27
d41114bc 274a41fd 9f35579a dde4992c 7834a892 2f237013 d3705e8d 935081e7
df733372 358410d1 985f0910 a377238d 36ae611a 408a6bff 9393f4a0 d3b181b1
m^26==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000003 31d5a2f6 4bb303d5 2ba99fe0 edf4c0a0 3afdeb5f e543480a
f56b024b 862ce1fe 6471350a 48d443de 7e5bf482 9ea83727 b5657712 3fb74fe6
3104af15 893ad884 ada1a796 da7ccf75 c13d1ba8 444dff07 5c3959e3 e71adbe1
m^27==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 1c304432 016ea847 09be8bf4 51f01c8d 08690452 9af28222 5a9abdfa
ec92ed12 0ff9d35b 04573ef2 7e9f1dc4 c9f7ed33 71313050 f950415f 512cc5ec
a6432d7b e80f646b 739313f1 7a60f354 bb4e650e 9f067f70 2058ce6c 6717cf11
m^28==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00f8b9a3 d01c12d1 55665f89 d3159b14 0b1d3167 c15e8827 0bbd3040 31e2b77e
dc64998a 0bc5e4a2 ffef7133 ae6deea8 004165a7 8695e8b5 5a804bf7 3ea9f7c1
f34e9430 32d2b4ce b2f7ed16 dc2d7f74 a8a163e8 fd41bf2e 301eb623 4e060b41
m^29==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 000892a8
6bd8fb60 9bb64c6b cd3bf1e0 8e60b3bf a49efb92 0ce6b320 3354a849 36e3976b
b9033ee1 a5645c19 6da1ff62 98295732 1b508c64 648b840b 1db9d59c 5e3fde74
3ec77ecd 1cbe600d 9d0ecb50 e8b6a7c8 519e6c2d 7a082d83 c1aafb34 52044071
m^30==
00000000 00000000 00000000 00000000 00000000 00000000 00004ba4 d77c1580
cbba6f69 63843c55 8728759c a939dc80 33e2bebb f8035560 eba068f8 01102a12
cc311d97 12902daa e11e917d 42c81634 ceeacf04 2bade371 53dabe2a 4b1bd913
8bd2a9cb 17ef3939 e9d11ad3 440ed1dd 12239d46 be479b7d b424d809 b2221ea1
m^31==
00000000 00000000 00000000 00000000 00000000 0000029b 7421d9ab 16ff3cc2
b6af6ce3 4dd62ecd 8a3ceec9 52c5867b 7805649c 5ce0cc25 ee27b0f2 018f05e5
b5fd7459 91843627 43040f69 40e81696 97356c92 dfa93826 c91abb63 a9bd6660
f698c330 1d1c61a6 9c3181d7 a6a48dd1 e31c656e 99413dbc 3bb2c2cc 2c9055d1
m^32==
00000000 00000000 00000000 00000000 00000017 015c97c3 d30d8783 aecb056e
17c50fa5 44987cf7 47ce6dee 73d605ef f67c0370 faa1d438 f127c126 8c7f0dc7
eb28b1a3 9282bf22 3335aa41 63d3ae36 e1bb0a44 86166dac fc048186 0c47d900
4f11e937 f0c297f5 1ca57df3 46fb3f26 33edeb86 2917ee5c 21376bef cdd09601
m^33==
00000000 00000000 00000000 00000000 cafd8741 5c9997b7 24f14a14 7184045c
96b21ec5 a034e1f8 5aebe094 f58b9cb3 a72a1475 041cf3f6 8158de20 24584688
561fecb9 bab2424b ff598539 2a43e199 50e7be9a 0d097f7a 7effbcc9 456b3810
6087a32a 580486e3 af3866ce 8d9480dc 02854297 8f3db2a0 5f3f4827 48e58f31
m^34==
00000000 00000000 00000000 06ff1c6a c0b00dbd 1864209e 024bc091 1aa08089
3f4c7b11 9e3cba1e 3a620a12 8025b83e 1a836242 289787aa 4dcc5593 e736b6af
89f6771a 98a35f97 d446bf80 7b84bffc 17b30e4f f25467c8 3d400a12 ac7f0952
9ec177a4 73745096 22cd8b64 8f3563a4 cdc1a59f 41c13d99 49c71518 8882f161
m^35==
00000000 00000000 003dbc18 3b827e9d 4b390e06 3c806e59 2697b705 e03d4182
735b3122 62023403 1e7be8dd 942ac335 1cf9eb9c d32287d5 eb3420e3 faa2a371
dbb8a87a dc7b5704 b5200930 88ae78ab 8d8eee32 524cd817 da813a4a edf417d3
a9f4a446 7dd1a934 6177108c 8e4d9afb 5e26aca9 b54077d8 f260e85e 293d6c91
m^36==
00000000 000220b9 6dfe7015 c8af0e1c 75d09d47 c07516f3 4f01df7f a8de9817
c25f0417 64057a5b d080462f 6620f71a 91cc4e8e cb94e61b 4fb4399c 77f0cec8
a0d51c4e 47e439ff e101790a 66d51a85 381e292e e646dc9c 860c7f05 9cdc0a64
dcd4f56b 3d9275d4 8c907808 025e2e0a bea399c0 6e77b0bc 180c0ac2 8cbab0c1
m^37==
000012c6 71b19ff3 5ada0352 437efd5b a51f75a3 84ec8110 09ce78ed 8317aa60
d4f7d494 07994aba b21e6b68 061ecdb8 fe31bb3b cb72356e 2c6e929d f9fa3c6f
183ee0f3 cac79eb1 eea0ffcc 3d4dfa18 8e59c032 012741ce 9f919edd 38914adb
74aff68b 3ba98b18 140aa63c 63d36aa9 4df2e72d 74c45e99 b76a3f32 35e16df1
m^38==
2f89d334 1eb9827c 9ff5d812 627c23f6 12fc7e89 0f5ef24e 432fec72 3fd847ae
a2cb0c9b 9fc0d722 11e8e0b1 df44b9eb ef475afb ac7c41d4 408ea2df 7cb3f275
58c9a9ff 37753e0a ceb0e1a3 57c7dc1a 2dd80218 1b9820a8 9c1e2152 08b91447
d7de8b7e 5eb73bc0 d4a73bcd 1a0e417a dfcf87b0 c1b04eea bd086ae2 0c6680bd
m^39==
40d03b6d 35220fd2 97cea2a8 c13f266c 84b2fcf8 6e1c8421 3bf975df 3adb4bf6
69687c13 40d0c20b 90ec76ef c46e2aa5 1f7ae28a 87565ee3 8c3a6e87 8f600653
1c62031a b89ff21f 9000833e 5561f248 3904ea83 51572901 8b6ff76c 47a97e85
60880abf 7bffb37a eab83b54 9e7c5273 c340693b 15db9bf7 8e9efabe 2133f9bc
m^40==
73ee9366 908a8eeb 4575a2b4 2f95e4db aa2a0c52 399c3836 8e3942a6 652bd2fb
2de4084b 48a50427 6a84561f 16e8d988 98e1ebcc 6dc84331 903033c1 776ba00e
98887900 b58c6e79 dc6b82c2 3a34b233 38b1aa23 94fa572a b127f6aa caa6fc72
ad5c33a2 85887cfb ac53a02e 33c9b6d6 6acd7644 27ae2057 64776d1b 71a4a65b
m^41==
175ddfd6 9073d607 da5f1fda 1aa5152a 7618929f 20c37f6a 3e1edb7c 2c97cf0b
b10bea0f d3a59b17 be9a6b3c ffb5cc23 ff22871f ed55bd97 0260728d 1e40d501
283c52d4 ee80616d 1e5d4acc a793a047 ce602721 e04c3f2d 9eea7d0d 5a2eb952
c82ba0d7 c73a0932 cd8a280d 43de8046 4a00c240 cd041d3f bae10174 dde1dd62
m^42==
18f5435e 1c99fd3a f264fb93 5befc4c8 17b3f4cd 3ad99fbe 6898d7bf 2edae896
89a2bfcc 3d1c5c1b 29be2d5c 59a5101a 9c144fce 7e145221 06c67cd3 bd681f78
a71daec7 a9034069 523940e3 1c4761dd 5f9fdb8c 3eb386ac 7d067930 edddafb3
b4009563 48a7fae8 f5e1c043 d693f0ef 7f515fee 98731551 bcb65bef cb415c6a
m^43==
055b29ad ac6aea53 c8d44d1f 4f1d5982 2f9da9d9 02996bf5 f7839047 ad24ab89
0fb23bb2 36be7366 9bf59c99 45c82514 87ce0bc0 476ecd08 939b8f83 73e47e00
53071d0c 097eedba 64291e38 4ce17863 32a99484 93a9b9a6 d8d95556 c34f2107
bf6cc028 f688abfc 96bbf39d 72151b6f 55ebb06c 49434327 cf3cb287 ca20609b
m^44==
3ab926ed fb1e1aee edbe27ac 5eea2763 39dbe613 b851b989 ab86c28d 968e07a1
9b84a5ff 2c99fa79 e470cce3 45221742 4bcedc6c 6efa501a 4333f999 567aa60a
48800201 a4240d62 786170a1 e532b698 7ebf5db0 b893a932 1d0e630e 5db7a616
19136b64 d2a081ad dad7ba84 aa4dbb09 a4e83467 e6552595 a1f770d5 d1981179
m^45==
30274e5a 298ccd3d eb2077d6 ad4f88c6 2f083f30 28e5a878 614e6e54 46bb40be
b47ddb23 3a1c2c6d db11e92f 9d1ef589 b9933f9d b1b3852b 8f858373 6f3de2a0
9cb54fd0 1e722b4a 84a892e9 323d4e03 485b2030 784d8c84 71a925f0 292b4f3c
58b031c8 a6076c73 de5079d8 083401bc 2f8aa003 5cffe40a 55fbc939 d8e080e0
m^46==
0444fa2c 9ef66799 1e3927ac c089e7e6 340e0961 0d2c8875 f1a4cedb d0c913c4
a785041d d0dae87b 4f4ffd81 052189e1 577d734e 0798020f 6cf6481d 828a1454
745f01b4 893ba783 e72dbf7e 51947459 3a8ae3a9 5b5e3bd9 65951b5c 96862068
bc5a90a4 a6dc0174 e7f9d0dd 10f7bca4 41fba0c1 0d064de8 d18ea341 0afdf714
m^47==
473568a7 ec53c3d3 b26fd444 8c5498f5 c16cbaf4 1da6b924 24dcaadf 7e663764
d6f926f9 e69e7fbf 2b0d878d 94e80294 dc9645f0 08502002 bfe47c95 911af380
47e72ec2 24810f5b 0f270593 1fd3067b a74bb9f4 18e495b6 6a01dff1 cb1916ce
9c808758 0a7f65c8 a1d0a956 13e21deb f5439ae3 0578b8c8 e052f533 4a0982b5
m^48==
75ca8a31 c2969122 f56f3a8f fb372e39 3828f010 e3feafe9 178774a4 1c002eb6
682c36fd 88d2cf5a 26556f8e 7ed26077 3d01717c 31ec57b2 0254086d 92f300fe
6815bd8b d2abfa06 770bbdc8 ee01ad3e 6c1c34e6 7f417ef6 439d7568 2f744dfa
4cc3dd7c 44597de1 0a19fb65 475249b2 26cd2eb2 7bd8b9e2 37fe26fb d5b33154
m^49==
0464247e ab850702 266906c7 7d5e05b4 f6322794 d29dfe4e b199dd50 059fd83c
6d5471fd 4a2f2ab9 207c5e2b 80c2de18 e99b5530 e0b37ec1 e0b8d48b e55c7959
6e90911b ac810585 5d09f25c 5e5982b8 0575ce68 693f0dfb 5b8e441e dfbfdf02
680ca55f 06b670b1 1c09de63 755207c8 b127a8c5 c2b4c809 8603e066 e3f78a0e
m^20 * m^25==m^45
30274e5a 298ccd3d eb2077d6 ad4f88c6 2f083f30 28e5a878 614e6e54 46bb40be
b47ddb23 3a1c2c6d db11e92f 9d1ef589 b9933f9d b1b3852b 8f858373 6f3de2a0
9cb54fd0 1e722b4a 84a892e9 323d4e03 485b2030 784d8c84 71a925f0 292b4f3c
58b031c8 a6076c73 de5079d8 083401bc 2f8aa003 5cffe40a 55fbc939 d8e080e0
m^25 * m^20==m^45
30274e5a 298ccd3d eb2077d6 ad4f88c6 2f083f30 28e5a878 614e6e54 46bb40be
b47ddb23 3a1c2c6d db11e92f 9d1ef589 b9933f9d b1b3852b 8f858373 6f3de2a0
9cb54fd0 1e722b4a 84a892e9 323d4e03 485b2030 784d8c84 71a925f0 292b4f3c
58b031c8 a6076c73 de5079d8 083401bc 2f8aa003 5cffe40a 55fbc939 d8e080e0
powers using exponentiation:
m^0==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
m^1==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 08d2d931
m^2==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 004ddb3c 1ca81b61
m^3==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 0002aef9 c5f1ad8d 78f47691
m^4==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 000017ad 9de92445 8933ffd9 2a3d9ac1
m^5==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 000000d0 ed718577 c6b30f43 0049a0be 484a37f1
m^6==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000007 337f948d e753aab7 6d2e407d 45b2ae54 2b51fe21
m^7==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 3f8a5754 4bfa1836 f89a2a9c eb754a14 6f5ed008 4a2d9d51
m^8==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 0230a81e b3074f73 1e41fb0c 1fb5fc26 e57cd297 989b1ecc 7186c581
m^9==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00135306 88994a1c 3c1faba7 095e075d 63a662f2 3886d795 5a0d8817 040826b1
m^10==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000aa82
b4b44619 c2336db6 61e11146 74f683ec d92ed7a0 a1e12846 0ff41eb7 f38d70e1
m^11==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 000005e0 85874c43
b5202a29 7682ec0a e32cadf8 f816a398 2d9242ec 1134d025 ee460436 23535411
m^12==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000033 db563487 ebbe9331
d09c862a a12c28bc d9018ea1 a14342d3 f9e8ad98 fe1ba3cd 1a7c4749 e3278041
m^13==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000001 c9909d34 64e49bc6 f7a16af4
ffb16846 99adefd3 e8d3b1e5 5337bfb4 40213978 d836d1e2 33ecd91a 3398a571
m^14==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 0fc561bd c21168f3 18c1a6be 9e86706c
11104df5 35b12322 1b087228 130920e9 5bf682ef 1794e962 9d77dc23 832673a1
m^15==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 008b2859 705b4c62 977b8294 a0babca7 e635a0f5
b3075ada 508212f0 3ad9b852 abf23fed 7009ba33 45262e8e 6ec6061f 94719ad1
m^16==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 0004cbdf f4b78ea3 a2d550ac 7345a9c5 0e94f34c 3cd92aa7
da058d52 b5da5639 9a1afa4b 1dd4b637 08ea0434 3e12b3cb 11a342e7 3d6bcb01
m^17==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00002a52 4f185755 8e5d3fda 8d475b2b 895825de 032ee4a5 f73a76e7
f36328c7 69f2969b 07e0b2d9 35982730 27269793 911d1dd5 df919217 af87b431
m^18==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000175 6de5837f 1651ef8a 80ab99f8 acf1c63f 023083ce 1ba91401 aadc2052
527054ae 4c83b943 7977120a e210a3cc 28750c11 9d4af26c c49d4545 f8e90661
m^19==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000000c
df002403 6c57c3f1 8d5e2a28 29c1afb8 a313aad5 1af2e938 140747bb 61a31a6d
e8a6d610 6266041d 5213a47a 1ec440c3 68ff9cc1 e634cca7 f50009bc 6e947191
m^20==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 7191dabb
73bf699c 6a752aa0 b7026b75 1694880b ae3a092f 20cfd4ec b3f5c140 0f0d48cb
0fe6c45b 99a19570 19515e77 7a0a27fc 6b0ddaf4 f3048528 cd49f01e af9fa5c1
m^21==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 03ea18d5 a8b6b14f
edcbca9f af1d973b e34dfba5 30c6acd0 8c941df9 830fb37c 49de0d31 335150c8
978e4dfa 7658ef9e 0b78c8e5 a83ede44 80c808bf da9fc8fa e65a06e1 f16152f1
m^22==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00228a21 3b65f850 1a44205f
7739b700 88169bf9 33446957 05fbcd84 d8883d57 83693df7 b8a5de25 49534408
6d7e17b3 8a240455 8e0f1a16 f6a880a3 61eaa264 fef5eb59 1bf3e348 44a12921
m^23==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 000130c3 a6d0851e 00881a7e 5084b965
e0dbd1e0 f2904890 eef5b4b5 5425d3a5 fbf80268 efa67ef0 55ede0b8 aff0ec99
e4d22b24 33305aff 1c8d0fb8 ac60c4d2 00618689 198921ea c8c4187e 83c7d851
m^24==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000a81 2045890f d16099ab 26a45719 2f282afb
9116564a c97c717f ea9580ad f9ada6df b61533c5 a44df0ff 33046b83 cb10022b
781771d4 678d7e3c b433f9ff 09a30ab9 62f83270 49de53be b232469d 9a0f1081
m^25==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 0000005c afd81c65 0c026a8d 5d5a530b ef6af516 32052f27
d41114bc 274a41fd 9f35579a dde4992c 7834a892 2f237013 d3705e8d 935081e7
df733372 358410d1 985f0910 a377238d 36ae611a 408a6bff 9393f4a0 d3b181b1
m^26==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000003 31d5a2f6 4bb303d5 2ba99fe0 edf4c0a0 3afdeb5f e543480a
f56b024b 862ce1fe 6471350a 48d443de 7e5bf482 9ea83727 b5657712 3fb74fe6
3104af15 893ad884 ada1a796 da7ccf75 c13d1ba8 444dff07 5c3959e3 e71adbe1
m^27==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 1c304432 016ea847 09be8bf4 51f01c8d 08690452 9af28222 5a9abdfa
ec92ed12 0ff9d35b 04573ef2 7e9f1dc4 c9f7ed33 71313050 f950415f 512cc5ec
a6432d7b e80f646b 739313f1 7a60f354 bb4e650e 9f067f70 2058ce6c 6717cf11
m^28==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00f8b9a3 d01c12d1 55665f89 d3159b14 0b1d3167 c15e8827 0bbd3040 31e2b77e
dc64998a 0bc5e4a2 ffef7133 ae6deea8 004165a7 8695e8b5 5a804bf7 3ea9f7c1
f34e9430 32d2b4ce b2f7ed16 dc2d7f74 a8a163e8 fd41bf2e 301eb623 4e060b41
m^29==
00000000 00000000 00000000 00000000 00000000 00000000 00000000 000892a8
6bd8fb60 9bb64c6b cd3bf1e0 8e60b3bf a49efb92 0ce6b320 3354a849 36e3976b
b9033ee1 a5645c19 6da1ff62 98295732 1b508c64 648b840b 1db9d59c 5e3fde74
3ec77ecd 1cbe600d 9d0ecb50 e8b6a7c8 519e6c2d 7a082d83 c1aafb34 52044071
m^30==
00000000 00000000 00000000 00000000 00000000 00000000 00004ba4 d77c1580
cbba6f69 63843c55 8728759c a939dc80 33e2bebb f8035560 eba068f8 01102a12
cc311d97 12902daa e11e917d 42c81634 ceeacf04 2bade371 53dabe2a 4b1bd913
8bd2a9cb 17ef3939 e9d11ad3 440ed1dd 12239d46 be479b7d b424d809 b2221ea1
m^31==
00000000 00000000 00000000 00000000 00000000 0000029b 7421d9ab 16ff3cc2
b6af6ce3 4dd62ecd 8a3ceec9 52c5867b 7805649c 5ce0cc25 ee27b0f2 018f05e5
b5fd7459 91843627 43040f69 40e81696 97356c92 dfa93826 c91abb63 a9bd6660
f698c330 1d1c61a6 9c3181d7 a6a48dd1 e31c656e 99413dbc 3bb2c2cc 2c9055d1
m^32==
00000000 00000000 00000000 00000000 00000017 015c97c3 d30d8783 aecb056e
17c50fa5 44987cf7 47ce6dee 73d605ef f67c0370 faa1d438 f127c126 8c7f0dc7
eb28b1a3 9282bf22 3335aa41 63d3ae36 e1bb0a44 86166dac fc048186 0c47d900
4f11e937 f0c297f5 1ca57df3 46fb3f26 33edeb86 2917ee5c 21376bef cdd09601
m^33==
00000000 00000000 00000000 00000000 cafd8741 5c9997b7 24f14a14 7184045c
96b21ec5 a034e1f8 5aebe094 f58b9cb3 a72a1475 041cf3f6 8158de20 24584688
561fecb9 bab2424b ff598539 2a43e199 50e7be9a 0d097f7a 7effbcc9 456b3810
6087a32a 580486e3 af3866ce 8d9480dc 02854297 8f3db2a0 5f3f4827 48e58f31
m^34==
00000000 00000000 00000000 06ff1c6a c0b00dbd 1864209e 024bc091 1aa08089
3f4c7b11 9e3cba1e 3a620a12 8025b83e 1a836242 289787aa 4dcc5593 e736b6af
89f6771a 98a35f97 d446bf80 7b84bffc 17b30e4f f25467c8 3d400a12 ac7f0952
9ec177a4 73745096 22cd8b64 8f3563a4 cdc1a59f 41c13d99 49c71518 8882f161
m^35==
00000000 00000000 003dbc18 3b827e9d 4b390e06 3c806e59 2697b705 e03d4182
735b3122 62023403 1e7be8dd 942ac335 1cf9eb9c d32287d5 eb3420e3 faa2a371
dbb8a87a dc7b5704 b5200930 88ae78ab 8d8eee32 524cd817 da813a4a edf417d3
a9f4a446 7dd1a934 6177108c 8e4d9afb 5e26aca9 b54077d8 f260e85e 293d6c91
m^36==
00000000 000220b9 6dfe7015 c8af0e1c 75d09d47 c07516f3 4f01df7f a8de9817
c25f0417 64057a5b d080462f 6620f71a 91cc4e8e cb94e61b 4fb4399c 77f0cec8
a0d51c4e 47e439ff e101790a 66d51a85 381e292e e646dc9c 860c7f05 9cdc0a64
dcd4f56b 3d9275d4 8c907808 025e2e0a bea399c0 6e77b0bc 180c0ac2 8cbab0c1
m^37==
000012c6 71b19ff3 5ada0352 437efd5b a51f75a3 84ec8110 09ce78ed 8317aa60
d4f7d494 07994aba b21e6b68 061ecdb8 fe31bb3b cb72356e 2c6e929d f9fa3c6f
183ee0f3 cac79eb1 eea0ffcc 3d4dfa18 8e59c032 012741ce 9f919edd 38914adb
74aff68b 3ba98b18 140aa63c 63d36aa9 4df2e72d 74c45e99 b76a3f32 35e16df1
m^38==
2f89d334 1eb9827c 9ff5d812 627c23f6 12fc7e89 0f5ef24e 432fec72 3fd847ae
a2cb0c9b 9fc0d722 11e8e0b1 df44b9eb ef475afb ac7c41d4 408ea2df 7cb3f275
58c9a9ff 37753e0a ceb0e1a3 57c7dc1a 2dd80218 1b9820a8 9c1e2152 08b91447
d7de8b7e 5eb73bc0 d4a73bcd 1a0e417a dfcf87b0 c1b04eea bd086ae2 0c6680bd
m^39==
40d03b6d 35220fd2 97cea2a8 c13f266c 84b2fcf8 6e1c8421 3bf975df 3adb4bf6
69687c13 40d0c20b 90ec76ef c46e2aa5 1f7ae28a 87565ee3 8c3a6e87 8f600653
1c62031a b89ff21f 9000833e 5561f248 3904ea83 51572901 8b6ff76c 47a97e85
60880abf 7bffb37a eab83b54 9e7c5273 c340693b 15db9bf7 8e9efabe 2133f9bc
m^40==
73ee9366 908a8eeb 4575a2b4 2f95e4db aa2a0c52 399c3836 8e3942a6 652bd2fb
2de4084b 48a50427 6a84561f 16e8d988 98e1ebcc 6dc84331 903033c1 776ba00e
98887900 b58c6e79 dc6b82c2 3a34b233 38b1aa23 94fa572a b127f6aa caa6fc72
ad5c33a2 85887cfb ac53a02e 33c9b6d6 6acd7644 27ae2057 64776d1b 71a4a65b
m^41==
175ddfd6 9073d607 da5f1fda 1aa5152a 7618929f 20c37f6a 3e1edb7c 2c97cf0b
b10bea0f d3a59b17 be9a6b3c ffb5cc23 ff22871f ed55bd97 0260728d 1e40d501
283c52d4 ee80616d 1e5d4acc a793a047 ce602721 e04c3f2d 9eea7d0d 5a2eb952
c82ba0d7 c73a0932 cd8a280d 43de8046 4a00c240 cd041d3f bae10174 dde1dd62
m^42==
18f5435e 1c99fd3a f264fb93 5befc4c8 17b3f4cd 3ad99fbe 6898d7bf 2edae896
89a2bfcc 3d1c5c1b 29be2d5c 59a5101a 9c144fce 7e145221 06c67cd3 bd681f78
a71daec7 a9034069 523940e3 1c4761dd 5f9fdb8c 3eb386ac 7d067930 edddafb3
b4009563 48a7fae8 f5e1c043 d693f0ef 7f515fee 98731551 bcb65bef cb415c6a
m^43==
055b29ad ac6aea53 c8d44d1f 4f1d5982 2f9da9d9 02996bf5 f7839047 ad24ab89
0fb23bb2 36be7366 9bf59c99 45c82514 87ce0bc0 476ecd08 939b8f83 73e47e00
53071d0c 097eedba 64291e38 4ce17863 32a99484 93a9b9a6 d8d95556 c34f2107
bf6cc028 f688abfc 96bbf39d 72151b6f 55ebb06c 49434327 cf3cb287 ca20609b
m^44==
3ab926ed fb1e1aee edbe27ac 5eea2763 39dbe613 b851b989 ab86c28d 968e07a1
9b84a5ff 2c99fa79 e470cce3 45221742 4bcedc6c 6efa501a 4333f999 567aa60a
48800201 a4240d62 786170a1 e532b698 7ebf5db0 b893a932 1d0e630e 5db7a616
19136b64 d2a081ad dad7ba84 aa4dbb09 a4e83467 e6552595 a1f770d5 d1981179
m^45==
30274e5a 298ccd3d eb2077d6 ad4f88c6 2f083f30 28e5a878 614e6e54 46bb40be
b47ddb23 3a1c2c6d db11e92f 9d1ef589 b9933f9d b1b3852b 8f858373 6f3de2a0
9cb54fd0 1e722b4a 84a892e9 323d4e03 485b2030 784d8c84 71a925f0 292b4f3c
58b031c8 a6076c73 de5079d8 083401bc 2f8aa003 5cffe40a 55fbc939 d8e080e0
m^46==
0444fa2c 9ef66799 1e3927ac c089e7e6 340e0961 0d2c8875 f1a4cedb d0c913c4
a785041d d0dae87b 4f4ffd81 052189e1 577d734e 0798020f 6cf6481d 828a1454
745f01b4 893ba783 e72dbf7e 51947459 3a8ae3a9 5b5e3bd9 65951b5c 96862068
bc5a90a4 a6dc0174 e7f9d0dd 10f7bca4 41fba0c1 0d064de8 d18ea341 0afdf714
m^47==
473568a7 ec53c3d3 b26fd444 8c5498f5 c16cbaf4 1da6b924 24dcaadf 7e663764
d6f926f9 e69e7fbf 2b0d878d 94e80294 dc9645f0 08502002 bfe47c95 911af380
47e72ec2 24810f5b 0f270593 1fd3067b a74bb9f4 18e495b6 6a01dff1 cb1916ce
9c808758 0a7f65c8 a1d0a956 13e21deb f5439ae3 0578b8c8 e052f533 4a0982b5
m^48==
75ca8a31 c2969122 f56f3a8f fb372e39 3828f010 e3feafe9 178774a4 1c002eb6
682c36fd 88d2cf5a 26556f8e 7ed26077 3d01717c 31ec57b2 0254086d 92f300fe
6815bd8b d2abfa06 770bbdc8 ee01ad3e 6c1c34e6 7f417ef6 439d7568 2f744dfa
4cc3dd7c 44597de1 0a19fb65 475249b2 26cd2eb2 7bd8b9e2 37fe26fb d5b33154
m^49==
0464247e ab850702 266906c7 7d5e05b4 f6322794 d29dfe4e b199dd50 059fd83c
6d5471fd 4a2f2ab9 207c5e2b 80c2de18 e99b5530 e0b37ec1 e0b8d48b e55c7959
6e90911b ac810585 5d09f25c 5e5982b8 0575ce68 693f0dfb 5b8e441e dfbfdf02
680ca55f 06b670b1 1c09de63 755207c8 b127a8c5 c2b4c809 8603e066 e3f78a0e
(m^45)^P-1==1
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
(m^20)^P-2 * m^20==1
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001
uhunix2:/home/23/dburger/classes/ics623/longa% 
