Hello Dr. Peterson, here is my secret sharing assignment submission.  At the tope you will find the output from running my program.  After that you will find the source files for the project.  I made my Galois Field functions so that they could be an arbitrary size.

*******************************************************************************
RESULT:
20756f59 276e6163 65672074 68742074 77207369 20687469 74702033 00002e73
You can't get th
is with 3 pts.
*******************************************************************************
Here is my makefile:
*******************************************************************************
secret: secret.o gfarith.o
	gcc secret.o gfarith.o -o secret
secret.o: secret.c secret.h
	gcc secret.c -c
gfarith.o: gfarith.c
	gcc gfarith.c -c

*******************************************************************************
Here is my main file secret.c:
*******************************************************************************
/*=============================================================================
Assignment: secret sharing
Author:     David J. Burger
Language:   ANSI C running on UHUNIX2 (Solaris)
Compile:    by running "make" with included makefile

Class:      ICS 623
Instructor: Dr. Peterson
Due Date:   12/07/01
===============================================================================
File:         secret.c

Description:  this program demonstrates the concept of secret sharing in which
              the m equations, m unknowns principal is used to provide secrecy
=============================================================================*/

#include <stdio.h>

#include "secret.h"

#define NUM 8

/*=============================================================================
Function printUL

Purpose:  prints the hex value of an array of size unsigned longs
          
Parameters:
          *p - array containing the unsigned longs
          size - number of unsigned longs to print from the array
          
Returns:  nothing, outputs hex values of the unsigned longs on the screen
=============================================================================*/
void printUL(ul *p, int size) {
    int i;
    for (i=0;i<size;i++) {
        printf("%08x",p[i]);
        if (i!=0 && (i+1)%8==0)
            printf("\n");
        else
            printf(" ");
    }
}

/*=============================================================================
Function fprintASCII

Purpose:  prints the char value of the bytes in an array of size unsigned
          longs
          
Parameters:
          *p - array containing the unsigned longs
          size - number of unsigned longs to print from the array
          
Returns:  nothing, outputs char values of the bytes in the unsigned longs
=============================================================================*/
void printASCII(ul *p, int size) {
  unsigned char text[4];
  int i,j;
  for (i=0;i<size;i++) {
    memcpy(text,&p[i],4);
    for (j=3;j>=0;j--) {
      printf("%c",text[j]);
    }
    if ((i+1)%4==0) printf("\n");
  }
  printf("\n");
}

/*=============================================================================
Function main

Purpose:  main entry point of program.  Computes the secret using the supplied
          points
          
Parameters:
          standard c command line arguments not used
                    
Returns:  nothing, prints out hex and ascii value of the secret
=============================================================================*/
int main(int argc, char *argv[]) {
  ul mod[8]; /* to hold the modulus */

  ul X1[8]; /* everyone's points */
  ul X2[8];
  ul X3[8];
  ul X4[8];

  ul Y1[8]; /* the y values produces by the x's */
  ul Y2[8];
  ul Y3[8];
  ul Y4[8];

  ul term1[8]; /* terms of the calculation */
  ul term2[8];
  ul term3[8];
  ul term4[8];

  ul one[8]; /* used as exponents in the calculation */
  ul two[8];
  ul three[8];

  ul num[8]; /* temporary numerator */
  ul den[8]; /* temporary denominator */
  ul temp1[8]; /* temps */
  ul temp2[8];
  ul temp3[8];

  ul exp[8]; /* exponent for finding inverse */

  ul result[8]; /* used for holding the .... result! */


  /* set up 2^255-2 */
  exp[0] = 0x7FFFFFFF;
  exp[1] = 0xFFFFFFFF;
  exp[2] = 0xFFFFFFFF;
  exp[3] = 0xFFFFFFFF;
  exp[4] = 0xFFFFFFFF;
  exp[5] = 0xFFFFFFFF;
  exp[6] = 0xFFFFFFFF;
  exp[7] = 0xFFFFFFFE;

  /* set up our modulus */
  zeroUL(mod,8);
  mod[0] = 0x80000000;
  mod[5] = 0x00040000;
  mod[7] = 0x00000001;

  /* set up one two three */
  zeroUL(one,8);
  zeroUL(two,8);
  zeroUL(three,8);
  one[7] = 1;
  two[7] = 2;
  three[7] = 3;

  /* My point */
  zeroUL(X1,8);
  X1[7] = 2;
  Y1[0] = 0x5dd293ac;
  Y1[1] = 0xc5fba8be; 
  Y1[2] = 0x12d5edcd;
  Y1[3] = 0xdccd50b5;
  Y1[4] = 0x2becf3f2;
  Y1[5] = 0x59ec0d4e;
  Y1[6] = 0x2cb949ee;
  Y1[7] = 0x3c34f626;

  /* Lisa Van Keulen's point */
  zeroUL(X2,8);
  X2[7] = 1;
  Y2[0] = 0x2e709eba;
  Y2[1] = 0xa75f2c77; 
  Y2[2] = 0xcfc99788;
  Y2[3] = 0xa83214e2;
  Y2[4] = 0xf925828a;
  Y2[5] = 0xa059397d;
  Y2[6] = 0xdede97cf;
  Y2[7] = 0xc0461ae5;

  /* Rui's point */
  zeroUL(X3,8);
  X3[7] = 4;
  Y3[0] = 0x7cef973a;
  Y3[1] = 0x619e0b5d; 
  Y3[2] = 0x56c37fae;
  Y3[3] = 0x6777b5f6;
  Y3[4] = 0x327af70e;
  Y3[5] = 0x8870a071;
  Y3[6] = 0xaf7790e2;
  Y3[7] = 0xc2e19697;

  /* Jian's point */
  zeroUL(X4,8);
  X4[7] = 7;
  Y4[0] = 0x17a67bdd;
  Y4[1] = 0x4538792b; 
  Y4[2] = 0xb5bf7055;
  Y4[3] = 0xa5733c95;
  Y4[4] = 0x60ab006e;
  Y4[5] = 0x00a4abee;
  Y4[6] = 0xe443adc1;
  Y4[7] = 0xc8bcafea;

  /* recover term 1*/
  multgfx(Y1,X2,mod,temp1,8);
  multgfx(temp1,X3,mod,temp1,8);
  multgfx(temp1,X4,mod,num,8); /* first numerator */

  addgfx(X1,X2,temp1,8);
  addgfx(X1,X3,temp2,8);
  addgfx(X1,X4,temp3,8);
  multgfx(temp1,temp2,mod,den,8);
  multgfx(den,temp3,mod,den,8);
  expgfx(den,exp,mod,den,8); /* change to inverse */

  multgfx(num,den,mod,term1,8);

  /* recover term 2*/
  multgfx(Y2,X1,mod,temp1,8);
  multgfx(temp1,X3,mod,temp1,8);
  multgfx(temp1,X4,mod,num,8); /* first numerator */

  addgfx(X2,X1,temp1,8);
  addgfx(X2,X3,temp2,8);
  addgfx(X2,X4,temp3,8);
  multgfx(temp1,temp2,mod,den,8);
  multgfx(den,temp3,mod,den,8);
  expgfx(den,exp,mod,den,8); /* change to inverse */

  multgfx(num,den,mod,term2,8);

  /* recover term 3 */
  multgfx(Y3,X1,mod,temp1,8);
  multgfx(temp1,X2,mod,temp1,8);
  multgfx(temp1,X4,mod,num,8); /* first numerator */

  addgfx(X3,X1,temp1,8);
  addgfx(X3,X2,temp2,8);
  addgfx(X3,X4,temp3,8);
  multgfx(temp1,temp2,mod,den,8);
  multgfx(den,temp3,mod,den,8);
  expgfx(den,exp,mod,den,8); /* change to inverse */

  multgfx(num,den,mod,term3,8);

  /* recover term 4*/
  multgfx(Y4,X1,mod,temp1,8);
  multgfx(temp1,X2,mod,temp1,8);
  multgfx(temp1,X3,mod,num,8); /* first numerator */

  addgfx(X4,X1,temp1,8);
  addgfx(X4,X2,temp2,8);
  addgfx(X4,X3,temp3,8);
  multgfx(temp1,temp2,mod,den,8);
  multgfx(den,temp3,mod,den,8);
  expgfx(den,exp,mod,den,8); /* change to inverse */

  multgfx(num,den,mod,term4,8);

  /* add them all together */
  addgfx(term1,term2,result,8);
  addgfx(result,term3,result,8);
  addgfx(result,term4,result,8);

  printf("RESULT:\n");
  printUL(result,8);
  printASCII(result,8);

}
*******************************************************************************
And here is my file secret.h:
*******************************************************************************
typedef unsigned long ul;

void zeroUL(ul *a, int size);
void copyUL(ul *a, ul *b, int size);
void makedegpolyx(ul *a, ul *result, int size);
void shlx(ul *a, int size, int c);
void shrx(ul *a, int size, int c);
void xorx(ul *a, ul *b, ul *result, int size);
int andx(ul *a, ul *b, int size);
void multXgfx(ul *a, ul *m, ul *result, int size);
void addgfx(ul *a, ul *b, ul *result, int size);
void multgfx(ul *a, ul *b, ul *m, ul *result, int size);
*******************************************************************************
And lastly the all important file for doing Galois Field arithmetic of an arbitrary size:
*******************************************************************************
/*=============================================================================
Assignment: secret sharing
Author:     David J. Burger
Language:   ANSI C running on UHUNIX2 (Solaris)
Compile:    by running "make" with included makefile

Class:      ICS 623
Instructor: Dr. Peterson
Due Date:   12/07/01
===============================================================================
File:         gfarith.c

Description:  this file contains the functions necessary for doing arithmetic
              in a Galois Field.  The functions are abstracted so that you can
              choose the size of the polynomials used in the field.
=============================================================================*/

#include "secret.h"

/*=============================================================================
Function zeroUL

Purpose:  zero's out the value of an unsigned long array
          
Parameters:
          *a - unsigned long array to zero out
          size - size of the arry
          
Returns:  nothing, unsigned long array a is zeroed out
=============================================================================*/
void zeroUL(ul *a, int size) {
  while (--size>=0) a[size] = 0;
}

/*=============================================================================
Function copyUL

Purpose:  copies the values in unsigned long array a to b
          
Parameters:
          *a - array to copy
          *b - array to copy to
          size - number of unsigned longs to copy from array a to array b
          
Returns:  nothing, b becomes a copy of a
=============================================================================*/
void copyUL(ul *a, ul *b, int size) {
  while (--size>=0) b[size] = a[size];
}

/*=============================================================================
Function shlx

Purpose:  left shift of unsigned long array
          
Parameters:
          *a - array to shift
          size - size of the array
          c - value to shift into the left most bit
          
Returns:  nothing, array a is shifted left by one bit
=============================================================================*/
void shlx(ul *a, int size, int c) {
  int i;
  for (i=0;i<size-1;i++) {
    a[i] = (a[i]<<1) | a[i+1]>>31;
  }
  a[size-1] = (a[size-1]<<1) | c;
}

/*=============================================================================
Function shrx

Purpose:  right shift of unsigned long array
          
Parameters:
          *a - array to shift
          size - size of the array
          c - value to shift into the right most bit
          
Returns:  nothing, array a is shifted right by one bit
=============================================================================*/
void shrx(ul *a, int size, int c) {
  int i;
  for (i=size-1;i>0;i--) {
    a[i] = (a[i]>>1) | a[i-1]<<31;
  }
  a[0] = (a[0]>>1) | (c<<31);
}

/*=============================================================================
Function xorx

Purpose:  xor's two unsigned long array's putting the result in result
          
Parameters:
          *a - first operand
          *b - second operand
          *result - where to put the result
          size - size of the arrays
          
Returns:  nothing, result contains a ^ b
=============================================================================*/
void xorx(ul *a, ul *b, ul *result, int size) {
  int i;
  ul t[size];
  for (i=0;i<size;i++)
    t[i] = a[i] ^ b[i];
  copyUL(t,result,size);
}

/*=============================================================================
Function andx

Purpose:  determines whether or not a and b share any common 1 bits
          
Parameters:
          *a - first operand
          *b - second operand
          size - size of the array
          
Returns:  true if a and b have a common one bit, false otherwise
=============================================================================*/
int andx(ul *a, ul *b, int size) {
  int i;
  for (i=0;i<size;i++)
    if (a[i] & b[i]) return 1;
  return 0;
}

/*=============================================================================
Function multXgfx

Purpose:  multiple a polynomials of a Galois Field by X
          
Parameters:
          *a - first operand
          *m - the modulus
          *result - where to put the result          
          size - size of the array
          
Returns:  nothing, result contains a * X mod m
=============================================================================*/
void multXgfx(ul *a, ul *m, ul *result, int size) {
  ul mask[size];
  zeroUL(mask,size);
  mask[0] = 0x80000000;
  copyUL(a,result,size);
  shlx(result,size,0);
  if (andx(result,mask,size)) xorx(result,m,result,size);
}

/*=============================================================================
Function addgfx

Purpose:  add two polynomial of a Galois Field
          
Parameters:
          *a - first operand
          *b - second operand
          *result - where to put the result
          size - size of the array
          
Returns:  nothing, a + b is placed in result
=============================================================================*/
void addgfx(ul *a, ul *b, ul *result, int size) {
  int i;
  ul t[size];
  for (i=0;i<size;i++)
    t[i] = a[i] ^ b[i];
  copyUL(t,result,size);
}

/*=============================================================================
Function multgfx

Purpose:  multiplication of two polynomials of a Galois Field
          
Parameters:
          *a - first operand
          *b - second operand
          *m - the modulus
          *result - where to put the result
          size - size of the array
          
Returns:  nothing, a * b mod m is placed in result
=============================================================================*/
void multgfx(ul *a, ul *b, ul *m, ul *result, int size) {
  ul mask[size];
  int i,j;
  ul t[size];
  zeroUL(t,size);
  zeroUL(mask,size);
  mask[0] = 0x80000000;
  for (i=0;i<size;i++) {
    for (j=0;j<32;j++) {
      multXgfx(t,m,t,size);
      if (andx(b,mask,size)) addgfx(t,a,t,size);
      shrx(mask,size,0);
    }
  }
  copyUL(t,result,size);
}

/*=============================================================================
Function expgfx

Purpose:  exponentiation of a polynomial of a Galois Field
          
Parameters:
          *a - base operand
          *b - exponent operand
          *m - the modulus
          *result - where to put the result
          size - size of the array
          
Returns:  nothing, a to the power b mod m is placed in result
=============================================================================*/
void expgfx(ul *a, ul*b, ul *m, ul *result, int size) {
  int i,j;
  ul mask[size];
  ul t[size];
  zeroUL(t,size);
  t[size-1] = 1;
  zeroUL(mask,size);
  mask[0] = 0x80000000;
  for (i=0;i<size;i++) {
    for (j=0;j<32;j++) {
      multgfx(t,t,m,t,size);
      if (andx(b,mask,size)) multgfx(t,a,m,t,size);
      shrx(mask,size,0);
    }
  }
  copyUL(t,result,size);
}






